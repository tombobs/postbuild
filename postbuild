#!/usr/bin/env node

'use strict';

const child_process = require('child_process');
const fs = require('fs');
const path = require('path');
const glob = require('glob');
const replaceStream = require('replacestream');
const program = require('commander');

let cssFiles;
let jsFiles;
let revision;
let removeCondition;

const replaceFunc = replacement => {
    return function() {
        return replacement === undefined ? arguments[0] : replacement;
    };
};

const handleError = (message) => {
    console.error(message);
    process.exit(1);
};

const getFullPath = (file) => file.substring(0, 1) !== '/' ? `${process.cwd()}/${file}` : `${process.cwd()}${file}`;

const removePrefix = (file, prefix) => prefix ? file.substr(prefix.length) : file;

program
.version('1.0.0')
.option('-i, --input <input>', 'Input file')
.option('-o, --output <output>', 'Output file (defaults to input when omitted)')
.option('-c, --css <css>', 'css file(s) to inject (file or directory). Wildcards can be used with quotation: \'**/*.css\'')
.option('-j, --js <js>', 'js file(s) to inject (file or directory). Wildcards can be used with quotation: \'**/*.js\'')
.option('-r, --remove <remove>', 'Remove condition')
.option('-g, --ignore <path>', 'Prefix to remove from the injected filenames')
.option('-H, --hash', 'Inject git hash of current commit')
.parse(process.argv);

if(!program.input) {
    handleError('Please specify an input file');
}
else {
    try {
        program.input = getFullPath(program.input);

        if(fs.lstatSync(program.input).isDirectory()) {
            handleError(`'${program.input}' is a directory, please specify an input file`);
        }
        if(!fs.lstatSync(program.input).isFile()) {
            handleError(`File '${program.input}' not found`);
        }
    }
    catch(e) {
        handleError(`File '${program.input}' not found`);
    }
}

program.output = program.output ? getFullPath(program.output) : program.input;

if(program.js) {
    const js = program.js;

    try {
        if(glob.hasMagic(js)) {
             jsFiles = glob.sync(js)
             .map(file => removePrefix(file, program.ignore))
             .map(file => `<script src="${file}"></script>`)
             .join('\n');
        }
        else if(fs.lstatSync(js).isDirectory()) {
             jsFiles = fs.readdirSync(js)
             .filter(file => file.substr(-3) === '.js')
             .map(file => removePrefix(`${js}/${file}`, program.ignore))
             .map(file => `<script src="${file}"></script>`)
             .join('\n');
        }
        else if(fs.lstatSync(js).isFile()) {
            let file = removePrefix(js, program.ignore);
            jsFiles = `<script src="${file}"></script>`;
        }
    }
    catch(e) {
        handleError(`File or folder '${js}' not found`);
    }
}

if(program.css) {
    const css = program.css;

    try {
        if(glob.hasMagic(css)) {
             cssFiles = glob.sync(css)
             .map(file => removePrefix(file, program.ignore))
             .map(file => `<link rel="stylesheet" href="${file}">`)
             .join('\n');
        }
        else if(fs.lstatSync(css).isDirectory()) {
            cssFiles = fs.readdirSync(css)
            .filter(file => file.substr(-4) === '.css')
            .map(file => removePrefix(`${css}/${file}`, program.ignore))
            .map(file => `<link rel="stylesheet" href="${file}">`)
            .join('\n');
        }
        else if(fs.lstatSync(css).isFile()) {
            let file = removePrefix(css, program.ignore);
            cssFiles = `<link rel="stylesheet" href="${file}">`;
        }
    }
    catch(e) {
        handleError(`File or folder '${css}' not found`);
    }
}

if(program.remove) {
    removeCondition = program.remove.split(':').pop();
}

if(program.hash) {
    revision = child_process
                .execSync('git rev-parse HEAD')
                .toString().trim();
}

const replaceJs = replaceFunc(jsFiles);
const replaceCss = replaceFunc(cssFiles);
const injectHash = replaceFunc(`<!-- ${revision} -->`)
const regex = new RegExp(`(<!\\-\\- remove:${removeCondition} \\-\\->)([\\s\\S]*?)(<!\\-\\- endremove \\-\\->)`, 'gm');

fs.createReadStream(program.input)
.pipe(replaceStream(/(<!\-\- inject:js \-\->)([\s\S]*?)(<!\-\- endinject \-\->)/gm, replaceJs))
.pipe(replaceStream(/(<!\-\- inject:css \-\->)([\s\S]*?)(<!\-\- endinject \-\->)/gm, replaceCss))
.pipe(replaceStream(/(<!\-\- inject:git\-hash \-\->)/gm, injectHash))
.pipe(replaceStream(regex, ''))
.pipe(fs.createWriteStream(program.output, {flags: 'r+'}));
